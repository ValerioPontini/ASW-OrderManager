apiVersion: v1
kind: ConfigMap
metadata:
  name: orders-db-cnfg
  labels:
    app: order-manager
    service: orders-db
data:
  POSTGRES_DB: orders
  POSTGRES_PASSWORD: order
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: orders-db-vlm
  labels:
    type: local
    app: order-manager
    service: orders-db
spec:
  storageClassName: manual
  capacity:
    storage: 0.5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/data/orders"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: orders-db-vlmcl
  labels:
    app: order-manager
    service: orders-db
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 0.5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-db-dpl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-manager
      service: orders-db
  template:
    metadata:
      labels:
        app: order-manager
        service: orders-db
    spec:
      volumes:
        - name: orders-data
          persistentVolumeClaim:
            claimName: orders-db-vlmcl
      containers:
        - name: asw-orders
          image: postgres:latest
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_HOST_AUTH_METHOD
              value: trust
          envFrom:
            - configMapRef:
                name: orders-db-cnfg
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: orders-data
---
apiVersion: v1
kind: Service
metadata:
  name: orders-db-sv
  labels:
    app: order-manager
    service: orders-db
spec:
  type: NodePort
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: order-manager
    service: orders-db
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: products-db-cnfg
  labels:
    app: order-manager
    service: products-db
data:
  POSTGRES_DB: products
  POSTGRES_PASSWORD: product
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: products-db-vlm
  labels:
    type: local
    app: order-manager
    service: products-db
spec:
  storageClassName: manual
  capacity:
    storage: 0.5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/data/products"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: products-db-vlmcl
  labels:
    app: order-manager
    service: products-db
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 0.5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: products-db-dpl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-manager
      service: products-db
  template:
    metadata:
      labels:
        app: order-manager
        service: products-db
    spec:
      volumes:
        - name: products-data
          persistentVolumeClaim:
             claimName: products-db-vlmcl
      containers:
        - name: asw-products
          image:  postgres:latest
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
              hostPort: 5432
          env:
            - name: POSTGRES_HOST_AUTH_METHOD
              value: trust
          envFrom:
            - configMapRef:
                name: products-db-cnfg
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: products-data
---
apiVersion: v1
kind: Service
metadata:
  name: products-db-sv
  labels:
    app: order-manager
    service: products-db
spec:
  type: NodePort
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: order-manager
    service: products-db
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: validation-db-cnfg
  labels:
    app: order-manager
    service: validation-db
data:
  POSTGRES_DB: validation
  POSTGRES_PASSWORD: valid
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: validation-db-vlm
  labels:
    type: local
    app: order-manager
    service: validation-db
spec:
  storageClassName: manual
  capacity:
    storage: 0.5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/data/validation"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: validation-db-vlmcl
  labels:
    app: order-manager
    service: validation-db
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 0.5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: validation-db-dpl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-manager
      service: validation-db
  template:
    metadata:
      labels:
        app: order-manager
        service: validation-db
    spec:
      volumes:
        - name: validation-data
          persistentVolumeClaim:
            claimName: validation-db-vlmcl
      containers:
        - name: asw-validation
          image:  postgres:latest
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_HOST_AUTH_METHOD
              value: trust
          envFrom:
            - configMapRef:
                name: validation-db-cnfg
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: validation-data
---
apiVersion: v1
kind: Service
metadata:
  name: validation-db-sv
  labels:
    app: order-manager
    service: validation-db
spec:
  type: NodePort
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: order-manager
    service: validation-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-manager
      service: zookeeper
  template: 
    metadata:
      labels:
        app: order-manager
        service: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: wurstmeister/zookeeper
        ports:
        - containerPort: 2181

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-manager
      service: kafka
  template: 
    metadata:
      labels:
        app: order-manager
        service: kafka
    spec:
      containers:
      - name: kafka
        image: wurstmeister/kafka:latest
        env:
        - name: KAFKA_ADVERTISED_HOST_NAME
          value: kafka
        - name: KAFKA_PORT
          value: "9092"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: zookeeper:2181
        - name: KAFKA_CREATE_TOPICS
          value: "new_order:2:1,new_product:2:1,update_product:2:1"
        ports:
        - containerPort: 9092      
---
kind: Service
apiVersion: v1
metadata:
  name: zookeeper
spec:
  selector:
    app: order-manager
    service: zookeeper
  ports:
  - protocol: TCP
    port: 2181
    targetPort: 2181
---
kind: Service
apiVersion: v1
metadata:
  name: kafka
spec:
  selector:
    app: order-manager
    service: kafka
  type: NodePort
  ports:
  - protocol: TCP
    port: 9092
    targetPort: 9092
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-manager
      service: order-service
  template: 
    metadata:
      labels:
        app: order-manager
        service: order-service
    spec:
      containers:
      - name: asw-order-service
        image: ordermanager-order
        imagePullPolicy: "Never"
        env: 
        - name: SPRING_PROFILES_ACTIVE
          value: order-service
        ports:
        - containerPort: 8080
        livenessProbe: 
          httpGet: 
            path: /actuator/health
            port: 8080
          periodSeconds: 5
          failureThreshold: 3 
          initialDelaySeconds: 120
        readinessProbe: 
          httpGet: 
            path: /actuator/health
            port: 8080
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-manager
      service: product-service
  template: 
    metadata:
      labels:
        app: order-manager
        service: product-service
    spec:
      containers:
      - name: asw-product-service
        image: ordermanager-product
        imagePullPolicy: "Never"
        env: 
        - name: SPRING_PROFILES_ACTIVE
          value: product-service
        ports:
        - containerPort: 8080
        livenessProbe: 
          httpGet: 
            path: /actuator/health
            port: 8080
          periodSeconds: 5
          failureThreshold: 3 
          initialDelaySeconds: 120
        readinessProbe: 
          httpGet: 
            path: /actuator/health
            port: 8080
          periodSeconds: 10

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ordervalidation-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-manager
      service: ordervalidation-service
  template: 
    metadata:
      labels:
        app: order-manager
        service: ordervalidation-service
    spec:
      containers:
      - name: asw-ordervalidation-service
        image: ordermanager-validation
        imagePullPolicy: "Never"
        env: 
        - name: SPRING_PROFILES_ACTIVE
          value: ordervalidation-service
        ports:
        - containerPort: 8080
        livenessProbe: 
          httpGet: 
            path: /actuator/health
            port: 8080
          periodSeconds: 5
          failureThreshold: 3 
          initialDelaySeconds: 120
        readinessProbe: 
          httpGet: 
            path: /actuator/health
            port: 8080
          periodSeconds: 10

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-manager
      service: api-gateway
  template: 
    metadata:
      labels:
        app: order-manager
        service: api-gateway
    spec:
      containers:
      - name: asw-apigateway-container
        image: ordermanager-api-gateway
        imagePullPolicy: "Never"
        ports:
        - containerPort: 8080
        livenessProbe: 
          httpGet: 
            path: /actuator/health
            port: 8080
          periodSeconds: 5
          failureThreshold: 3 
          initialDelaySeconds: 180
        readinessProbe: 
          httpGet: 
            path: /actuator/health
            port: 8080
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  selector:
    app: order-manager
    service: order-service
  type: NodePort
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
  
---
apiVersion: v1
kind: Service
metadata:
  name: product-service
spec:
  selector:
    app: order-manager
    service: product-service
  type: NodePort
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: ordervalidation-service
spec:
  selector:
    app: order-manager
    service: ordervalidation-service
  type: NodePort
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
spec:
  selector:
    app: order-manager
    service: api-gateway
  type: NodePort
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: order-manager
spec:
  ingressClassName: nginx
  rules:
  - host: order-manager.aswroma3.it 
    http: 
      paths: 
      - pathType: Prefix
        path: /
        backend: 
          service: 
            name: api-gateway
            port: 
              number: 8080 
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: service-discovery-reader
rules:
  - apiGroups: ["", "extensions", "apps"]
    resources: ["pods", "services", "endpoints"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-discovery-reader-binding
subjects:
  - kind: Group
    name: system:serviceaccounts
    apiGroup: ""
roleRef:
  kind: ClusterRole
  name: service-discovery-reader
  apiGroup: ""
